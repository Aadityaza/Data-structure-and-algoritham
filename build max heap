#include<iostream>
#include<math.h>
#define max_size 100
using namespace std;

class heap {
    
    int arr[max_size];
    
    
public:
    heap() {
        arr[0] = 0; //stores the size of heap 
    }
    int right(int index) {
        return index * 2 + 1;
    }
    int left(int index) {
        return index * 2;
    }
    int parent(int index) {
        return index / 2;
    }
    void disp() {
        for (int i = 1; i <= arr[0]; i++) {
            cout << arr[i] << " ";
        }
    }
    void add(int data) {
        arr[0]++;
        arr[arr[0]] = data;        
        this->max_heap();
    }
    void max_heapify(int i) {
        if (arr[right(i)] > arr[left(i)] && arr[right(i)] > arr[i]) {
            int temp = arr[i];
            arr[i] = arr[right(i)];
            arr[right(i)] = temp;
        }
        else if (arr[left(i)] > arr[right(i)] && arr[left(i)] > arr[i]) {
            int temp = arr[i];
            arr[i] = arr[left(i)];
            arr[left(i)] = temp;
        }
    }
    void max_heap() {
        if (arr[0] > 1) {
            for (int i = floor((arr[0]+1) / 2); i != 0; i--) {
                max_heapify(i);
            }
        }

    }
};
int main() {
    heap H;
    H.add(40);
    H.add(60);
    H.add(10);
    H.add(20);
    H.add(50);
    H.add(30);


    H.disp();


}
